/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/reduce-css-calc@1.3.0";
exports.ids = ["vendor-chunks/reduce-css-calc@1.3.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/reduce-css-calc@1.3.0/node_modules/reduce-css-calc/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/reduce-css-calc@1.3.0/node_modules/reduce-css-calc/index.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Module dependencies\n */\nvar balanced = __webpack_require__(/*! balanced-match */ \"(ssr)/./node_modules/.pnpm/balanced-match@0.4.2/node_modules/balanced-match/index.js\")\nvar reduceFunctionCall = __webpack_require__(/*! reduce-function-call */ \"(ssr)/./node_modules/.pnpm/reduce-function-call@1.0.3/node_modules/reduce-function-call/index.js\")\nvar mexp = __webpack_require__(/*! math-expression-evaluator */ \"(ssr)/./node_modules/.pnpm/math-expression-evaluator@1.4.0/node_modules/math-expression-evaluator/src/formula_evaluator.js\")\n\n/**\n * Constantes\n */\nvar MAX_STACK = 100 // should be enough for a single calc()...\nvar NESTED_CALC_RE = /(\\+|\\-|\\*|\\\\|[^a-z]|)(\\s*)(\\()/g\n\n/**\n * Global variables\n */\nvar stack\n\n/**\n * Expose reduceCSSCalc plugin\n *\n * @type {Function}\n */\nmodule.exports = reduceCSSCalc\n\n/**\n * Reduce CSS calc() in a string, whenever it's possible\n *\n * @param {String} value css input\n */\nfunction reduceCSSCalc(value, decimalPrecision) {\n  stack = 0\n  decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision)\n\n  // Allow calc() on multiple lines\n  value = value.replace(/\\n+/g, \" \")\n\n  /**\n   * Evaluates an expression\n   *\n   * @param {String} expression\n   * @returns {String}\n   */\n  function evaluateExpression (expression, functionIdentifier, call) {\n    if (stack++ > MAX_STACK) {\n      stack = 0\n      throw new Error(\"Call stack overflow for \" + call)\n    }\n\n    if (expression === \"\") {\n      throw new Error(functionIdentifier + \"(): '\" + call + \"' must contain a non-whitespace string\")\n    }\n\n    expression = evaluateNestedExpression(expression, call)\n\n    var units = getUnitsInExpression(expression)\n\n    // If the expression contains multiple units or CSS variables,\n    // then let the expression be (i.e. browser calc())\n    if (units.length > 1 || expression.indexOf(\"var(\") > -1) {\n      return functionIdentifier + \"(\" + expression + \")\"\n    }\n\n    var unit = units[0] || \"\"\n\n    if (unit === \"%\") {\n      // Convert percentages to numbers, to handle expressions like: 50% * 50% (will become: 25%):\n      // console.log(expression)\n      expression = expression.replace(/\\b[0-9\\.]+%/g, function(percent) {\n        return parseFloat(percent.slice(0, -1)) * 0.01\n      })\n    }\n\n    // Remove units in expression:\n    var toEvaluate = expression.replace(new RegExp(unit, \"gi\"), \"\")\n    var result\n\n    try {\n      result = mexp.eval(toEvaluate)\n    }\n    catch (e) {\n      return functionIdentifier + \"(\" + expression + \")\"\n    }\n\n    // Transform back to a percentage result:\n    if (unit === \"%\") {\n      result *= 100\n    }\n\n    // adjust rounding shit\n    // (0.1 * 0.2 === 0.020000000000000004)\n    if (functionIdentifier.length || unit === \"%\") {\n      result = Math.round(result * decimalPrecision) / decimalPrecision\n    }\n\n    // Add unit\n    result += unit\n\n    return result\n  }\n\n  /**\n   * Evaluates nested expressions\n   *\n   * @param {String} expression\n   * @returns {String}\n   */\n  function evaluateNestedExpression(expression, call) {\n    // Remove the calc part from nested expressions to ensure\n    // better browser compatibility\n    expression = expression.replace(/((?:\\-[a-z]+\\-)?calc)/g, \"\")\n    var evaluatedPart = \"\"\n    var nonEvaluatedPart = expression\n    var matches\n    while ((matches = NESTED_CALC_RE.exec(nonEvaluatedPart))) {\n      if (matches[0].index > 0) {\n        evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index)\n      }\n\n      var balancedExpr = balanced(\"(\", \")\", nonEvaluatedPart.substring([0].index))\n      if (balancedExpr.body === \"\") {\n        throw new Error(\"'\" + expression + \"' must contain a non-whitespace string\")\n      }\n\n      var evaluated = evaluateExpression(balancedExpr.body, \"\", call)\n\n      evaluatedPart += balancedExpr.pre + evaluated\n      nonEvaluatedPart = balancedExpr.post\n    }\n\n    return evaluatedPart + nonEvaluatedPart\n  }\n\n  return reduceFunctionCall(value, /((?:\\-[a-z]+\\-)?calc)\\(/, evaluateExpression)\n}\n\n/**\n * Checks what units are used in an expression\n *\n * @param {String} expression\n * @returns {Array}\n */\n\nfunction getUnitsInExpression(expression) {\n  var uniqueUnits = []\n  var uniqueLowerCaseUnits = []\n  var unitRegEx = /[\\.0-9]([%a-z]+)/gi\n  var matches = unitRegEx.exec(expression)\n\n  while (matches) {\n    if (!matches || !matches[1]) {\n      continue\n    }\n\n    if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {\n      uniqueUnits.push(matches[1])\n      uniqueLowerCaseUnits.push(matches[1].toLowerCase())\n    }\n\n    matches = unitRegEx.exec(expression)\n  }\n\n  return uniqueUnits\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVkdWNlLWNzcy1jYWxjQDEuMy4wL25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDRHQUFnQjtBQUN2Qyx5QkFBeUIsbUJBQU8sQ0FBQyw4SEFBc0I7QUFDdkQsV0FBVyxtQkFBTyxDQUFDLDZKQUEyQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZHVjZS1jc3MtY2FsY0AxLjMuMC9ub2RlX21vZHVsZXMvcmVkdWNlLWNzcy1jYWxjL2luZGV4LmpzPzJhOWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cbnZhciBiYWxhbmNlZCA9IHJlcXVpcmUoXCJiYWxhbmNlZC1tYXRjaFwiKVxudmFyIHJlZHVjZUZ1bmN0aW9uQ2FsbCA9IHJlcXVpcmUoXCJyZWR1Y2UtZnVuY3Rpb24tY2FsbFwiKVxudmFyIG1leHAgPSByZXF1aXJlKFwibWF0aC1leHByZXNzaW9uLWV2YWx1YXRvclwiKVxuXG4vKipcbiAqIENvbnN0YW50ZXNcbiAqL1xudmFyIE1BWF9TVEFDSyA9IDEwMCAvLyBzaG91bGQgYmUgZW5vdWdoIGZvciBhIHNpbmdsZSBjYWxjKCkuLi5cbnZhciBORVNURURfQ0FMQ19SRSA9IC8oXFwrfFxcLXxcXCp8XFxcXHxbXmEtel18KShcXHMqKShcXCgpL2dcblxuLyoqXG4gKiBHbG9iYWwgdmFyaWFibGVzXG4gKi9cbnZhciBzdGFja1xuXG4vKipcbiAqIEV4cG9zZSByZWR1Y2VDU1NDYWxjIHBsdWdpblxuICpcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSByZWR1Y2VDU1NDYWxjXG5cbi8qKlxuICogUmVkdWNlIENTUyBjYWxjKCkgaW4gYSBzdHJpbmcsIHdoZW5ldmVyIGl0J3MgcG9zc2libGVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgY3NzIGlucHV0XG4gKi9cbmZ1bmN0aW9uIHJlZHVjZUNTU0NhbGModmFsdWUsIGRlY2ltYWxQcmVjaXNpb24pIHtcbiAgc3RhY2sgPSAwXG4gIGRlY2ltYWxQcmVjaXNpb24gPSBNYXRoLnBvdygxMCwgZGVjaW1hbFByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gNSA6IGRlY2ltYWxQcmVjaXNpb24pXG5cbiAgLy8gQWxsb3cgY2FsYygpIG9uIG11bHRpcGxlIGxpbmVzXG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxuKy9nLCBcIiBcIilcblxuICAvKipcbiAgICogRXZhbHVhdGVzIGFuIGV4cHJlc3Npb25cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV4cHJlc3Npb25cbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIGV2YWx1YXRlRXhwcmVzc2lvbiAoZXhwcmVzc2lvbiwgZnVuY3Rpb25JZGVudGlmaWVyLCBjYWxsKSB7XG4gICAgaWYgKHN0YWNrKysgPiBNQVhfU1RBQ0spIHtcbiAgICAgIHN0YWNrID0gMFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FsbCBzdGFjayBvdmVyZmxvdyBmb3IgXCIgKyBjYWxsKVxuICAgIH1cblxuICAgIGlmIChleHByZXNzaW9uID09PSBcIlwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZnVuY3Rpb25JZGVudGlmaWVyICsgXCIoKTogJ1wiICsgY2FsbCArIFwiJyBtdXN0IGNvbnRhaW4gYSBub24td2hpdGVzcGFjZSBzdHJpbmdcIilcbiAgICB9XG5cbiAgICBleHByZXNzaW9uID0gZXZhbHVhdGVOZXN0ZWRFeHByZXNzaW9uKGV4cHJlc3Npb24sIGNhbGwpXG5cbiAgICB2YXIgdW5pdHMgPSBnZXRVbml0c0luRXhwcmVzc2lvbihleHByZXNzaW9uKVxuXG4gICAgLy8gSWYgdGhlIGV4cHJlc3Npb24gY29udGFpbnMgbXVsdGlwbGUgdW5pdHMgb3IgQ1NTIHZhcmlhYmxlcyxcbiAgICAvLyB0aGVuIGxldCB0aGUgZXhwcmVzc2lvbiBiZSAoaS5lLiBicm93c2VyIGNhbGMoKSlcbiAgICBpZiAodW5pdHMubGVuZ3RoID4gMSB8fCBleHByZXNzaW9uLmluZGV4T2YoXCJ2YXIoXCIpID4gLTEpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbklkZW50aWZpZXIgKyBcIihcIiArIGV4cHJlc3Npb24gKyBcIilcIlxuICAgIH1cblxuICAgIHZhciB1bml0ID0gdW5pdHNbMF0gfHwgXCJcIlxuXG4gICAgaWYgKHVuaXQgPT09IFwiJVwiKSB7XG4gICAgICAvLyBDb252ZXJ0IHBlcmNlbnRhZ2VzIHRvIG51bWJlcnMsIHRvIGhhbmRsZSBleHByZXNzaW9ucyBsaWtlOiA1MCUgKiA1MCUgKHdpbGwgYmVjb21lOiAyNSUpOlxuICAgICAgLy8gY29uc29sZS5sb2coZXhwcmVzc2lvbilcbiAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UoL1xcYlswLTlcXC5dKyUvZywgZnVuY3Rpb24ocGVyY2VudCkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChwZXJjZW50LnNsaWNlKDAsIC0xKSkgKiAwLjAxXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSB1bml0cyBpbiBleHByZXNzaW9uOlxuICAgIHZhciB0b0V2YWx1YXRlID0gZXhwcmVzc2lvbi5yZXBsYWNlKG5ldyBSZWdFeHAodW5pdCwgXCJnaVwiKSwgXCJcIilcbiAgICB2YXIgcmVzdWx0XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gbWV4cC5ldmFsKHRvRXZhbHVhdGUpXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb25JZGVudGlmaWVyICsgXCIoXCIgKyBleHByZXNzaW9uICsgXCIpXCJcbiAgICB9XG5cbiAgICAvLyBUcmFuc2Zvcm0gYmFjayB0byBhIHBlcmNlbnRhZ2UgcmVzdWx0OlxuICAgIGlmICh1bml0ID09PSBcIiVcIikge1xuICAgICAgcmVzdWx0ICo9IDEwMFxuICAgIH1cblxuICAgIC8vIGFkanVzdCByb3VuZGluZyBzaGl0XG4gICAgLy8gKDAuMSAqIDAuMiA9PT0gMC4wMjAwMDAwMDAwMDAwMDAwMDQpXG4gICAgaWYgKGZ1bmN0aW9uSWRlbnRpZmllci5sZW5ndGggfHwgdW5pdCA9PT0gXCIlXCIpIHtcbiAgICAgIHJlc3VsdCA9IE1hdGgucm91bmQocmVzdWx0ICogZGVjaW1hbFByZWNpc2lvbikgLyBkZWNpbWFsUHJlY2lzaW9uXG4gICAgfVxuXG4gICAgLy8gQWRkIHVuaXRcbiAgICByZXN1bHQgKz0gdW5pdFxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlcyBuZXN0ZWQgZXhwcmVzc2lvbnNcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV4cHJlc3Npb25cbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIGV2YWx1YXRlTmVzdGVkRXhwcmVzc2lvbihleHByZXNzaW9uLCBjYWxsKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBjYWxjIHBhcnQgZnJvbSBuZXN0ZWQgZXhwcmVzc2lvbnMgdG8gZW5zdXJlXG4gICAgLy8gYmV0dGVyIGJyb3dzZXIgY29tcGF0aWJpbGl0eVxuICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UoLygoPzpcXC1bYS16XStcXC0pP2NhbGMpL2csIFwiXCIpXG4gICAgdmFyIGV2YWx1YXRlZFBhcnQgPSBcIlwiXG4gICAgdmFyIG5vbkV2YWx1YXRlZFBhcnQgPSBleHByZXNzaW9uXG4gICAgdmFyIG1hdGNoZXNcbiAgICB3aGlsZSAoKG1hdGNoZXMgPSBORVNURURfQ0FMQ19SRS5leGVjKG5vbkV2YWx1YXRlZFBhcnQpKSkge1xuICAgICAgaWYgKG1hdGNoZXNbMF0uaW5kZXggPiAwKSB7XG4gICAgICAgIGV2YWx1YXRlZFBhcnQgKz0gbm9uRXZhbHVhdGVkUGFydC5zdWJzdHJpbmcoMCwgbWF0Y2hlc1swXS5pbmRleClcbiAgICAgIH1cblxuICAgICAgdmFyIGJhbGFuY2VkRXhwciA9IGJhbGFuY2VkKFwiKFwiLCBcIilcIiwgbm9uRXZhbHVhdGVkUGFydC5zdWJzdHJpbmcoWzBdLmluZGV4KSlcbiAgICAgIGlmIChiYWxhbmNlZEV4cHIuYm9keSA9PT0gXCJcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInXCIgKyBleHByZXNzaW9uICsgXCInIG11c3QgY29udGFpbiBhIG5vbi13aGl0ZXNwYWNlIHN0cmluZ1wiKVxuICAgICAgfVxuXG4gICAgICB2YXIgZXZhbHVhdGVkID0gZXZhbHVhdGVFeHByZXNzaW9uKGJhbGFuY2VkRXhwci5ib2R5LCBcIlwiLCBjYWxsKVxuXG4gICAgICBldmFsdWF0ZWRQYXJ0ICs9IGJhbGFuY2VkRXhwci5wcmUgKyBldmFsdWF0ZWRcbiAgICAgIG5vbkV2YWx1YXRlZFBhcnQgPSBiYWxhbmNlZEV4cHIucG9zdFxuICAgIH1cblxuICAgIHJldHVybiBldmFsdWF0ZWRQYXJ0ICsgbm9uRXZhbHVhdGVkUGFydFxuICB9XG5cbiAgcmV0dXJuIHJlZHVjZUZ1bmN0aW9uQ2FsbCh2YWx1ZSwgLygoPzpcXC1bYS16XStcXC0pP2NhbGMpXFwoLywgZXZhbHVhdGVFeHByZXNzaW9uKVxufVxuXG4vKipcbiAqIENoZWNrcyB3aGF0IHVuaXRzIGFyZSB1c2VkIGluIGFuIGV4cHJlc3Npb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXhwcmVzc2lvblxuICogQHJldHVybnMge0FycmF5fVxuICovXG5cbmZ1bmN0aW9uIGdldFVuaXRzSW5FeHByZXNzaW9uKGV4cHJlc3Npb24pIHtcbiAgdmFyIHVuaXF1ZVVuaXRzID0gW11cbiAgdmFyIHVuaXF1ZUxvd2VyQ2FzZVVuaXRzID0gW11cbiAgdmFyIHVuaXRSZWdFeCA9IC9bXFwuMC05XShbJWEtel0rKS9naVxuICB2YXIgbWF0Y2hlcyA9IHVuaXRSZWdFeC5leGVjKGV4cHJlc3Npb24pXG5cbiAgd2hpbGUgKG1hdGNoZXMpIHtcbiAgICBpZiAoIW1hdGNoZXMgfHwgIW1hdGNoZXNbMV0pIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaWYgKHVuaXF1ZUxvd2VyQ2FzZVVuaXRzLmluZGV4T2YobWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpKSA9PT0gLTEpIHtcbiAgICAgIHVuaXF1ZVVuaXRzLnB1c2gobWF0Y2hlc1sxXSlcbiAgICAgIHVuaXF1ZUxvd2VyQ2FzZVVuaXRzLnB1c2gobWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpKVxuICAgIH1cblxuICAgIG1hdGNoZXMgPSB1bml0UmVnRXguZXhlYyhleHByZXNzaW9uKVxuICB9XG5cbiAgcmV0dXJuIHVuaXF1ZVVuaXRzXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/reduce-css-calc@1.3.0/node_modules/reduce-css-calc/index.js\n");

/***/ })

};
;